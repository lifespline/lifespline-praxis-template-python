---

commands:
  lint_circleci:
    description: Lint the circleci config file.
    steps:
      - run:
          name: lint project yml files
          command: yamllint .circleci/config.yml
  lint_python:
    description: Lint the python source code files.
    steps:
      - run:
          name: lint project python files
          command: pylama setup.py
  build_and_push_package:
    description: |
      Build and push python package either to TestPyPi or to PyPi. The
      repository is decided according to the current branch. The `main` branch
      pushes to PyPi, the `dev` branch pushes to Test PyPi. Otherwise, the
      package is not pushed.
    steps:
      - run:
          name: build and publish the python package
          command: |
            echo "[1 of 3] Build python package"
            python -m build .

            # Pushing policy
            if [ $CIRCLE_BRANCH == 'main' ] ; then
              REPO=pypi
            elif [ $CIRCLE_BRANCH == 'dev' ] ; then
              REPO=testpypi
            else
              # skip repo push
              exit 0
            fi

            # get repo API token from circleci context
            PASSWD=$password

            echo "[2 of 3] Persisting credentials for repo `$REPO`"
            echo "[$REPO]" > .pypirc
            echo "username = __token__" >> .pypirc
            echo "password = $PASSWD" >> .pypirc

            echo "[3 of 3] Authenticate with https://$REPO"
            python -m twine upload \
              --config-file .pypirc \
              -r $REPO \
              dist/*
  pull_and_test_package:
    description: |
      Pull and test python package either from TestPyPi or from PyPi. The
      repository is decided according to the current branch. The `main` branch
      pulls from PyPi, the `dev` branch pulls from Test PyPi. Otherwise, no
      operation is performed.
    steps:
      - run:
          name: pull python package
          command: |
            # Pulling policy
            if [ $CIRCLE_BRANCH == 'main' ] ; then
              REPO=pypi.org
            elif [ $CIRCLE_BRANCH == 'dev' ] ; then
              REPO=test.pypi.org
            else
              # skip repo pull
              exit 0
            fi

            echo "[1 of 2] Pull `lifespline-praxis-template-python` from https://$REPO/simple/"
            pip install -i https://$REPO/simple/ lifespline-utils

            echo "[2 of 2] Verify import of `lifespline-praxis-template-python` modules"
            python -m lifespline_praxis_template_python.example
jobs:
  lint:
    description: Lint package project files
    docker:
      - image: lifespline/praxis:exercise-template-python-executor
    steps:
      - checkout
      - lint_circleci
      - lint_python
  push:
    description: build and push package, either to pypi or to testpypi
    docker:
      - image: lifespline/praxis:exercise-template-python-executor
    steps:
      - checkout
      - build_and_push_package
  pull:
    description: Pull and test package, either from pypi or from testpypi
    docker:
      - image: lifespline/praxis:exercise-template-python-executor
    steps:
      - checkout
      - pull_and_test_package

version: 2.1
workflows:
  # Code Quality Assurance (don't run over dev and main branches)
  # TODO ignore both dev and main
  lint:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - dev
  # CICD for branch `dev`. Branch policy at job-level.
  build-and-push-dev:
    jobs:
      - push:
          context:
            - lifespline-praxis-template-praxis-testpypi-api-token
          filters:
            branches:
              only:
                - dev
      - pull:
          requires:
            - push
          context:
            - lifespline-praxis-template-praxis-testpypi-api-token
          filters:
            branches:
              only:
                - dev
  # CICD for branch `main`. Branch policy at job-level.
  build-and-push-prd:
    jobs:
      - push:
          context:
            - lifespline-praxis-template-praxis-pypi-api-token
          filters:
            branches:
              only:
                - main
      - pull:
          requires:
            - push
          context:
            - lifespline-praxis-template-praxis-pypi-api-token
          filters:
            branches:
              only:
                - main
